---
title: "Marketing Campaign at a Glance"
author:
    name: Chris Lee
    url: https://clfee.github.io/
date: 2024-07-15
format: 
  dashboard:
    orientation: columns
    nav-buttons: [github]
    github: https://github.com/clfee
logo: "/assets/images/cmm1.PNG"
theme: [sandstone, theme/custom.scss]
editor_options: 
  chunk_output_type: console
---

```{r}
#| context: setup
rm(list=ls())
library(ggplot2)
library(dplyr)
library(tidyverse)
library(gt)
library(reshape)
library(scales)
library(DT)
library(echarts4r)
library(echarts4r.maps)
library(gridExtra)  
library(data.table)
source("~/data/helper.R")
train <- read.csv("~/data/train.csv")
state <- read.csv("~/data/states.csv")

#| label: prep-data

train   <- train |>
    mutate(
    success = case_when(
      conversion_status == "converted"  ~ 1,
      conversion_status == "not_converted"  ~ 0
    ),
    request_update = case_when(
      update_me == "Y"  ~ 1,
      update_me == "N"  ~ 0
    ))
```

```{r}
#| label: converted rate across states

# converted rate on average
avg_converted_rate <- train |>
  #group_by(geoid)|>
  count(conversion_status) |>
  mutate(p = round(100*(n / sum(n)),2))|>
  filter(conversion_status == "converted")|>
  pull(p)

# average converted rate based on communication channel
comm_converted_rate <- train |>
  group_by(communication_channel)|>
  count(conversion_status) |>
  mutate(p = round(100*(n / sum(n)),2))|>
  filter(conversion_status == "converted")

# state-wise average converted rate 
state_converted_rate <- train |>
  group_by(geoid)|>
  count(conversion_status) |>
  mutate(p = round(100*(n / sum(n)),2))|>
  filter(conversion_status == "converted")

# quarter average converted rate 
quarter_converted_rate <- train |>
  group_by(quater_res)|>
  count(conversion_status) |>
  mutate(p = round(100*(n / sum(n)),2))|>
  filter(conversion_status == "converted")

best_comm_pct <- max(comm_converted_rate$p)
best_comm_way <- comm_converted_rate|>
             filter(p == best_comm_pct)|>
             pull(communication_channel)

best_state_pct <- max(state_converted_rate$p)
best_state <- state_converted_rate |>
             filter(p == best_state_pct)|>
             pull(geoid)
best_q_pct <- max(quarter_converted_rate$p)
best_q <- quarter_converted_rate |>
             filter(p == best_q_pct )|>
             pull(quater_res)

```

#  {.sidebar}

This dashboard displays analysis for:

|              |                   |
|--------------|-------------------|
| **Campaign** | New Offer         |
| **Date**     | 2023 Q1 - 2024 Q2 |

------------------------------------------------------------------------

The campaign results were as follows:

|                                |                                            |
|-------------------------------|-----------------------------------------|
| **Mean Conversion %**          | `{r} avg_converted_rate`%                  |
| **Best way** for Communication | `{r} best_comm_way` , `{r} best_comm_pct`% |
| **Best Performing** State      | `{r} best_state` , `{r} best_state_pct`%   |
| **Best Performing** Quarter    | `{r} best_q` , `{r} best_q_pct`%           |

------------------------------------------------------------------------

::: {.callout-note collapse="true"}
## Disclaimer

This is a fictional compaign results. The data are simulated based on realistic new merachant offer from [this report by the MD & CH](https://clfee.github.io/python/image/classification/image-classification1/).
:::

# Stats

## Column

```{r}
#| title: Convertion Rate per State 
#| height: 40%

colnames(state)[2]= "geoid"
st <- merge(train, state, by= "geoid")

  st |>  
  group_by(State,quater_res)|>
  count(conversion_status) |>
  mutate(p = 100*(n / sum(n))) |>
  filter(conversion_status == "converted")|>
  select(State, quater_res, p)|>
  #pivot_wider(names_from = quater_res, values_from = p)|>
  #tidyr::gather("Key",  "Value", q1, q2, q4) |> 
  group_by(quater_res)|>
  e_chart(State, timeline = TRUE) |>
  em_map("USA") |> 
  e_map(p, map = "USA") |>
  e_visual_map(min= 0, max= 30, color = c("darkred","red","orange","yellow","lightgreen","steelblue","darkblue"))|>
  e_timeline_opts(autoPlay = TRUE) 

```

```{r}
#| title: USA Compagin Results
#| height: 60%
#| padding: 0;

state_converted_rate[,c(1,3:4)] |>
#  arrange(id) |>
  datatable(
    colnames = c("State","Converted #", "Converted %"),
    options = list(dom = 'ftp', paging = TRUE)
    )

```

## Column {.tabset width="40%"}

```{r}
#| title: Conversion rate
#| fig-height: 8
#| padding: 0;

results_list <- vector("list", ncol(train) - 1)
# Loop through the columns starting from the 2nd column
for (i in 2:ncol(train)) {
  # Store the result of cal_freq(i) in the list
  results_list[[i - 1]] <- cal_freq(i)
}
dt <- do.call(rbind, results_list)

# label bar graph
dt$vars <- ifelse(dt$Freqx > 0.15, as.character(dt$Var1), "")

f <- dt |>
ggplot(aes(x = round(Freqx,2), y = fct_rev(namex), fill = Var1)) +
  geom_col(position = "fill", color = "white") +
  scale_x_continuous(labels = label_percent()) +
  labs(y = NULL, x = NULL, fill = "var1")+
  guides(fill="none") +
  geom_text(aes(label = vars), position = position_stack(vjust =   0.5), color = "white")+
  theme_minimal()

d <- train |>
 group_by(quater_res)|>
  count(conversion_status) |>
  mutate(p = round(100*(n / sum(n)),2))|>
  filter(conversion_status == "converted")|>
  ggplot(aes(x = quater_res, y = p , group = 1)) +
  geom_line(color = "steelblue",linewidth = 1)+
  geom_point(color = 5)+
  coord_cartesian(ylim = c(10, 14))+
  ggtitle("23'Q2-24'Q2 Overall Conversion rate") +
  xlab(NULL) + 
  ylab(NULL)+ 
  theme(legend.title=element_blank(),
    panel.background = element_blank())+
    theme(axis.line = element_line(color = 'black'))

a <- train |>
 group_by(previous_campaign_outcome,quater_res)|>
  count(conversion_status) |>
  mutate(p = round(100*(n / sum(n)),2))|>
  filter(conversion_status == "converted")|>
  ggplot(aes(x = quater_res, y = p, group = previous_campaign_outcome, color =previous_campaign_outcome )) +
  geom_line()+
  geom_point()+
  ggtitle("Previous Campaign vs Conversion rate") +
  xlab(NULL) + 
  ylab(NULL)+ 
  theme(legend.title=element_blank(),
    panel.background = element_blank())+
    theme(axis.line = element_line(color = 'black'))
  
b <- train |>
 group_by(communication_channel,quater_res)|>
  count(conversion_status) |>
  mutate(p = round(100*(n / sum(n)),2))|>
  filter(conversion_status == "converted")|>
  ggplot(aes(x = quater_res, y = p, group = communication_channel, color =communication_channel )) +
  geom_line()+
  geom_point()+
  ggtitle("Communication channel vs Conversion rate") +
  xlab(NULL) + 
  ylab(NULL)+ 
  theme(legend.title=element_blank(),
    panel.background = element_blank())+
    theme(axis.line = element_line(color = 'black'))

c <- train |>
 group_by(update_me, quater_res)|>
  count(conversion_status) |>
  mutate(p = round(100*(n / sum(n)),2))|>
  filter(conversion_status == "converted")|>
  ggplot(aes(x = quater_res, y = p, group = update_me, color =update_me )) +
  geom_line()+
  geom_point()+
  ggtitle("Request update vs Conversion rate") +
  xlab(NULL) + 
  ylab(NULL)+ 
  theme(legend.title=element_blank(),
    panel.background = element_blank())+
    theme(axis.line = element_line(color = 'black'))  

grid.arrange(d, a, b, c, nrow = 4) 
```

```{r}
#| title: Correlations
#| fig-height: 6
#| padding: 0;
dt <- train |>
    select("success", "call_duration", "call_frequency","request_update","call_frequency","len_business" )

cormat <- round(cor(dt),2)
cormat[lower.tri(cormat)]<- NA
cormat <-  reshape2::melt(cormat)
colnames(cormat) <- c("X1","X2","value")
a <-
  cormat|>
  ggplot( aes(x=X2, y=X1, fill=value)) + 
  geom_tile()+
  geom_text(aes(X2, X1, label = value), color = "white", size = 4)+
  theme_minimal() +
  theme(axis.line = element_line(color = 'black'))+
  labs(y = NULL, x = NULL)
  
b <- category_cor(data_= train, var_ ="communication_channel", target_ = "success" )
c <- category_cor(data_= train, var_ ="previous_campaign_outcome", target_ = "success" )
grid.arrange( a, b,  nrow = 2)   
  
```

```{r}
#| title: Overview categorical data (bargraph)
#| fig-height: 6

results_list <- vector("list", ncol(train) - 1)
# Loop through the columns starting from the 2nd column
for (i in 2:ncol(train)) {
  # Store the result of cal_freq(i) in the list
  results_list[[i - 1]] <- cal_freq(i)
}
dt <- do.call(rbind, results_list)

# label bar graph
dt$vars <- ifelse(dt$Freqx > 0.15, as.character(dt$Var1), "")

dt |>
ggplot(aes(x = round(Freqx,2), y = fct_rev(namex), fill = Var1)) +
  geom_col(position = "fill", color = "white") +
  scale_x_continuous(labels = label_percent()) +
  labs(y = NULL, x = NULL, fill = "var1")+
  guides(fill="none") +
  geom_text(aes(label = vars), position = position_stack(vjust =   0.5), color = "white")+
  theme_minimal()

```
