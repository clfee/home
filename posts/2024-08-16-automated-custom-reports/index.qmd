---
title: "Automated Custom reports - parameterized reporting "
author:
    name: Chris Lee
    url: https://clfee.github.io/
date: 2024-08-16
format: 
  html:
        html-math-method: katex
        grid: 
            margin-width: 350px
fig-width: 10
fig-height: 6
params:
  year: 2022
  record_date: 2024
editor_options: 
  chunk_output_type: console
execute: 
  echo: fenced
reference-location: margin
citation-location: margin
categories:
  - R 
  - Data organization
preview: "main.PNG"
---
Automatically generated reports, one after another from an R script!

Parameterized reporting is a technique that allows to generate multiple reports simultaneously. The technique also makes your work more accurate, as it avoids copy-and-paste errors. 

{{< video demo.mp4 >}}



**Goal : ** The objective of this report is to demonstrate how to create automated custom reports with `Quarto` and `Purrr` in R to track patient days from public data.

The demo uses the data from [California Health and Human Services Open Data Portal](https://data.chhs.ca.gov/dataset/methicillin-resistant-staphylococcus-aureus-mrsa-bloodstream-infections-bsi-in-california-hospitals). All California general acute care hospitals are required to report Methicillin-resistant Staphylococcus aureus (MRSA) bloodstream infection (BSI) cases that occur following hospitalization. MRSA is a serious, contagious bacterial infection that starts on your skin. Itâ€™s a type of staph infection that resists most common antibiotics, making it especially dangerous. Without treatment, MRSA can be deadly. 


## First Step - single report

First, let's prepare a single report as a template from the data in `r params$year`.


### Healthcare Associated Infection Report, `r params$year`

```{r}
#| context: setup
#| include: false


# Load required packages
library(tidyverse)
library(ggplot2)

# Load data
url_2022 <- "https://data.chhs.ca.gov/dataset/a345bba7-25ed-4019-b6e3-0b597bea7368/resource/3ff809c6-c1e2-4107-be0c-f976521aadb2/download/mrsa_bsi_odp_2022.csv"
url_2021 <- "https://data.chhs.ca.gov/dataset/a345bba7-25ed-4019-b6e3-0b597bea7368/resource/23bef156-ae4d-4800-8512-d29660b2269f/download/cdph_mrsa_bsi_odp_2021.csv"
url_2019 <- "https://data.chhs.ca.gov/dataset/a345bba7-25ed-4019-b6e3-0b597bea7368/resource/62aead61-e320-4a74-b64c-1f65efa72b35/download/cdph_mrsa_bsi_odp_2019.csv"
url_2023 <-"https://data.chhs.ca.gov/dataset/a345bba7-25ed-4019-b6e3-0b597bea7368/resource/15c4962f-e357-4b03-9d24-655a2bc8030c/download/mrsa_bsi_odp_2023.csv"

data_2023 <- read_csv(url_2023)
data_2022 <- read_csv(url_2022)
data_2021 <- read_csv(url_2021)
data_2019 <- read_csv(url_2019)

# Combine data
mrsa_combine <- bind_rows(data_2023,data_2022, data_2021, data_2019)

# Remove redundant data
mrsa_combine <- unique(mrsa_combine)

# Data transformation
mrsa_combine <- mrsa_combine |>
  select(-State, -HAI, -Met_2020_Goal, -SIR_CI_95_Lower_Limit, -SIR_CI_95_Upper_Limit, -Comparison, -On_Track, -Notes) |>
  mutate(Months = as.numeric(ifelse(is.na(Months), 13, Months)),
         Year = as.numeric(ifelse(is.na(Year), 2021, Year)),
         Months = as.character(Months),
         #Year = as.character(Year),
         Infections_Reported = as.numeric(Infections_Reported))|>
  filter(!grepl("Pooled", Facility_Name, ignore.case = TRUE),
         !grepl("Pooled", Facility_Type, ignore.case = TRUE))
```

#### Results

Figure 1. Box plots of Standardized Infection Ratio (SIR) in `r params$year`
```{r}
#| label: Boxplots
#| code-fold: true
#| warning: false

color_palette <- c("#167bb2","#2e3b4f","#7A6C5D","#2e4f42","#A54657","#624151","#16b29b","#002c47","#9d72d0"
)

 mrsa_combine|>
    filter(Year == params$year) |>
    filter(County %in% c("San Diego" ,"San Francisco", "Los Angeles", "Sacramento", "Orange","Yolo" ))|>
    ggplot(aes(x= Hospital_Type, y= SIR, fill=Hospital_Type))+
     geom_boxplot()+
    scale_fill_manual(values=color_palette)+
       theme(
      legend.position="none",
      plot.title = element_text(size=11),
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    ) +
    ggtitle(paste0("Standardized Infection Ratio (SIR) in ",params$year)) +
    xlab("")+ylab("")+labs(caption="Produced by CF Lee")+
   facet_wrap(~County)
 
```

Figure 2. Patients Days vs Reported infection cases in `r params$year`  
```{r}
#| code-fold: true
#| warning: false

 mrsa_combine$Months <- as.numeric(mrsa_combine$Months)

 mrsa_combine |> 
    filter(Year == params$year) |>
    mutate(Quarters = case_when(
                         Months > 0 & Months < 4 ~ 1,
                         Months > 3 & Months < 7 ~ 2,
                         Months > 6 & Months < 10 ~ 3 , 
                         Months > 9 & Months < 13 ~ 4 , 
                                .default = 4))|>
  # group_by(Quarters,Hospital_Category_RiskAdjustment, Year)|>
  #  summarise(mean = mean(na.omit(Infections_Reported)))|> 
    
    ggplot(aes(x= Patient_Days, y= Infections_Reported, 
               colour = as.integer(Quarters)))+
     geom_point(alpha = 0.7, show.legend = FALSE) +

    theme_bw()+
    ggtitle(paste0("Patients Days vs Reported infection cases in ",params$year)) +
    theme(#axis.text.x=element_blank(),
          axis.text=element_text(size=12),
          legend.position = "bottom",
          axis.line = element_line(colour = "black"),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          panel.background = element_blank())+
          facet_wrap(~Hospital_Category_RiskAdjustment)+
    xlab("Days")+ylab("Cases")+labs(caption="Produced by CF Lee")
```

Note: Patient Days is define as below. A count of the number of patients in the hospital during a time period, excluding IRFs and IPFs with their own CCN numbers. A rehabilitation unit (IRF) with its own CCN number reports separately from the rest of the hospital. To calculate patient days, the number of patients is recorded at the same time each day for each day of the month. At the end of the month, the daily counts are summed. See the NHSN website: http://www.cdc.gov/nhsn.

## Second Step- All variations at once

Once you are done with the single report. It is time to render all report variations. To do this, write an R script to render the parameterized Quarto template with each of the defined parameters.

In our example the code looks like this,

```         
# 1. First create a dataframe 

data <- expand.grid(
  year = c(2019,2021:2023),
  record_date = Sys.Date(), 
  stringsAsFactors = FALSE)

df <- data |> 
  dplyr::mutate(
    output_format = "html",       # Output format (html, word, etc.)
    output_file = paste(          # Output file name
      year, "report.html",
      sep = "-"
    ),
    execute_params = purrr::map2( # Named list of parameters
      record_date, year, 
      \(record_date, year) list(record_date = record_date, year = year)
    )
  ) |> 
  dplyr::select(-c(record_date, year))

df

# 2. Use purrr::pwalk() to map over each row of the dataframe and render each report variation.

purrr::pwalk(
  .l = df,                      # Dataframe to map over
  .f = quarto::quarto_render,   # Quarto render function
  input = "demo_autoreport.qmd",       # Named arguments of .f
  .progress = TRUE              # Optionally, show a progress bar
)
```
## Resources
1. The raw data is obtained from California Health and Human Services Open Data Portal [datasets](https://data.chhs.ca.gov/dataset/methicillin-resistant-staphylococcus-aureus-mrsa-bloodstream-infections-bsi-in-california-hospitals)

2. Full code [link](https://github.com/clfee)